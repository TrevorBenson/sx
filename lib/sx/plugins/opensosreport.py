#!/usr/bin/env python3
"""
This plugin opens the html report generated by sosreport in a browser.

This plugin uses the default browser that is returned via:
$ echo $BROWSER

To set or change browser, set that variable in your ~/.bash_profile or
~/.bashrc.

Here is a list of valid webbrowsers:
http://docs.python.org/library/webbrowser.html#module-webbrowser

@author    :  Shane Bradley
@contact   :  sbradley@redhat.com
@version   :  2.02
@copyright :  GPLv2
"""
import logging
import os.path
import webbrowser

import sx
import sx.plugins
from sx.logwriter import LogWriter

class Opensosreport(sx.plugins.PluginBase):
    """
    This is that will open a webbrowser for an html file contain in sosreport.
    """
    def __init__(self, pathToPluginReportDir=""):
        """
        This init takes the root path to where the reports will be
        written. The parent class will then create the correct
        directory structure for the plugin.

        @param pathToPluginReportDir: This is the root path to where
        the report files will be written.
        @type pathToPluginReportDir: String
        """
        sx.plugins.PluginBase.__init__(self, "OpenSOSReport",
                                       "This plugin opens the html report generated by sosreport in a browser.",
                                       ["Sosreport"], False, True, {"fileviewer":"This is the browser that will be used to open reports."},
                                       pathToPluginReportDir)

        self.__pathToHTMLReportMap = {}

    # #######################################################################
    # Functions that should be overwritten in the plugin
    # #######################################################################
    def setup(self, reports) :
        """
        This function will setup data structure to hold any data/path
        to files that are needed to use in this plugin.

        @param reports: This is the list of Report Objects.
        @type reports: Array
        """
        message = "Running setup for plugin: %s" %(self.getName())
        logging.getLogger(sx.MAIN_LOGGER_NAME).status(message)
        for report in reports:
            if (self.isValidReportType(report)) :
                pathToHTMLReportFile = os.path.join(report.getPathToExtractedReport(), "sos_reports/sosreport.html")
                if (os.path.exists(pathToHTMLReportFile)) :
                    (head, tail) = os.path.split(report.getPathToExtractedReport())
                    self.__pathToHTMLReportMap[tail] = pathToHTMLReportFile

    def action(self) :
        """
        This function will open a webbrowser in a new tab for each
        html if the fileviewer supports that option, otherwise a new
        tab is created.
        """
        message = "Performing action for plugin: %s" %(self.getName())
        logging.getLogger(sx.MAIN_LOGGER_NAME).status(message)
        keys = self.__pathToHTMLReportMap.keys()
        keys.sort()
        for key in keys:
            message = "Opening a tab that contains the generated html report for sosreport: %s" %(key)
            logging.getLogger(sx.MAIN_LOGGER_NAME).status(message)
            webBrowserName = self.getOptionValue("fileviewer")
            if (len(webBrowserName) > 0):
                try :
                    wb = webbrowser.get(webBrowserName)
                    wb.open_new_tab(self.__pathToHTMLReportMap[key])
                except webbrowser.Error:
                    message = "Using the default web browser since the option for OpenSOSReport.fileviewer did not exist: %s" %(webBrowserName)
                    logging.getLogger(sx.MAIN_LOGGER_NAME).warning(message)
                    webbrowser.open_new_tab(self.__pathToHTMLReportMap[key])
            else:
                # Use the default
                webbrowser.open_new_tab(self.__pathToHTMLReportMap[key])

